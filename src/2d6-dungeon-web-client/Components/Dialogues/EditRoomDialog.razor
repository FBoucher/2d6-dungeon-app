@implements IDialogContentComponent<MappedRoom>
@rendermode InteractiveServer


    <div>
        <h3>Move a door</h3>
        <FluentRadioGroup Name="selectedExit" @bind-Value=@selectedExitKey @onchange=@SelectedExit_onchange Label="Select a door to move" >
            @foreach(var door in @Content!.Exits!)
            {
                <FluentRadio Value="@door.Key">@door.Key</FluentRadio>
            }
        </FluentRadioGroup>
        <div id="verticalAxe" hidden="@verticalAxeHidden">
            <FluentButton OnClick="@(() => MoveExit('U'))" >move up</FluentButton>
            <FluentButton OnClick="@(() => MoveExit('D'))" >move down</FluentButton>
        </div>
        <div id="horizontalAxe" hidden="@horizontalAxeHidden">
            <FluentButton OnClick="@(() => MoveExit('L'))" >move left</FluentButton>
            <FluentButton OnClick="@(() => MoveExit('R'))" >move right</FluentButton>
        </div>
    </div>




@code {

    [Parameter]
    public required MappedRoom Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; } = default!;

    private Direction? selectedExitKey { get; set; } = null;
    private Exit selectedExit { get; set; } = default!;

    private bool verticalAxeHidden = true;
    private bool horizontalAxeHidden = true;

    protected override void OnInitialized()
    {
        // init
    }

    private async Task SaveAsync()
    {
            await Dialog.CloseAsync(Content);
    }

    private void SelectedExit_onchange(ChangeEventArgs value){

        selectedExitKey = (Direction)Enum.Parse(typeof(Direction), value.Value!.ToString()!);

        var myExit = Content.Exits[(Direction)selectedExitKey!];
     
        switch(myExit.Direction){
            case Direction.North:
            case Direction.South:
                    verticalAxeHidden = true;
                    horizontalAxeHidden = false;
                    break;
            case Direction.East:
            case Direction.West:
                    verticalAxeHidden = false;
                    horizontalAxeHidden = true;
                    break;
        }
    }

    private void MoveExit(char moveTo)
    {
        @* if (Content.Exits == null || Content.Exits.Count == 0 || selectedExitId == 0) 
            return; *@

        //selectedExit = Content.Exits.ElementAt(selectedExitId).Value;
        selectedExit = Content.Exits[(Direction)selectedExitKey!];
        
        switch (moveTo)
        {
            case 'L':
            case 'D':
                selectedExit.PositionOnWall = selectedExit.PositionOnWall--;
                break;
            case 'R':
            case 'U':
                selectedExit.PositionOnWall = selectedExit.PositionOnWall++;
                break;
            default:
                return; // Invalid direction
        }

        Dialog.TogglePrimaryActionButton(true);
    }

}
