@rendermode InteractiveServer

<h3>Turn @turnCounter</h3>
<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2" >
    <ShiftButtons   rolledValue="@primaryDice"
                    shiftedValue="@primaryShiftedDice"  
                    ShiftLeft="@shiftLeft" 
                    DiceShifted="PrimaryDiceShifted"></ShiftButtons>
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" HorizontalGap="0" Width="145">
        <span>
            <Dice color="Dice.DiceColor.red" size="Dice.DiceSize.regular" face="primaryShiftedDice" />
            <Dice color="Dice.DiceColor.purple" size="Dice.DiceSize.regular" face="secondaryShiftedDice" />
        </span>
        @shiftLeft shift left
        <FluentButton Appearance="Appearance.Accent" @onclick=Roll2Dice IconStart="@(new Icons.Regular.Size16.Cube())">Roll</FluentButton>
    </FluentStack>
    <ShiftButtons   rolledValue="@secondaryDice" 
                    shiftedValue="@secondaryShiftedDice" 
                    ShiftLeft="@shiftLeft" 
                    DiceShifted="SecondaryDiceShifted"></ShiftButtons>
    <FluentSpacer Width="200"></FluentSpacer>
    <FluentButton Appearance="Appearance.Accent" @onclick=ResetDice IconStart="@(new Icons.Regular.Size16.ArrowCircleLeft())">Reset Dice</FluentButton>
    <FluentButton Appearance="Appearance.Accent" @onclick=NextTurn IconStart="@(new Icons.Regular.Size16.ArrowNext())">End Turn</FluentButton>
</FluentStack>




@code {

    [Parameter]
    public required List<string> actions { get; set; }

    [Parameter]
    public EventCallback<List<string>> ActionsChanged { get; set; }

    
    private int turnCounter { get; set; } = 1;

    [Parameter]
    public EventCallback<int> TurnCounterChanged { get; set; }

    [Parameter]
    public int Shift { get; set; } = 0;

    [Parameter]
    public EventCallback<int> ShiftChanged { get; set; }


    private int primaryDice = 0;
    private int primaryShiftedDice = 0;
    private int secondaryDice = 0;
    private int secondaryShiftedDice = 0;

    private DiceResult? originalDice;

    //private int shift = 0;
    private int shiftLeft = 0;
    protected override void OnInitialized()
    {
        
    }

    protected override void OnParametersSet()
    {
        if (shiftLeft == 0)
        {
            shiftLeft = Shift;
        }
    }

    private void Roll2Dice()
    {
        var dice = originalDice = DiceResult.Roll2Dice();
        primaryDice = primaryShiftedDice = dice.PrimaryDice;
        secondaryDice = secondaryShiftedDice = dice.SecondaryDice;

        actions.Add($"Rolled {primaryDice} and {secondaryDice}");
        ActionsChanged.InvokeAsync(actions);

        StateHasChanged();
    }

    private void NextTurn()
    {
        actions.Add($"End Turn {turnCounter}");
        turnCounter++;
        TurnCounterChanged.InvokeAsync(turnCounter);
        primaryDice = primaryShiftedDice = 0;
        secondaryDice = secondaryShiftedDice = 0;
        shiftLeft = Shift;
        actions.Add($"Start Turn {turnCounter}");
        ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }

    private async Task PrimaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = primaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            primaryShiftedDice++;
        }
        else
        {
            primaryShiftedDice--;
        }
        actions.Add($"Primary dice Shifted from {preValue} to {primaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private async Task SecondaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = secondaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            secondaryShiftedDice++;
        }
        else
        {
            secondaryShiftedDice--;
        }
        actions.Add($"Secondary dice Shifted from {preValue} to {secondaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private int GetShiftLeftValue(){
        var pDiceMovs = Math.Abs(primaryDice - primaryShiftedDice);
        var sDiceMovs = Math.Abs(secondaryDice - secondaryShiftedDice);
        var movLeft = Shift - pDiceMovs - sDiceMovs;
        return movLeft;
        //return Shift - Math.Abs(primaryDice - primaryShiftedDice) - Math.Abs(secondaryDice - secondaryShiftedDice);
    }

    private void ResetDice()
    {
        primaryDice = primaryShiftedDice = originalDice?.PrimaryDice ?? 0;
        secondaryDice = secondaryShiftedDice = originalDice?.SecondaryDice ?? 0;
        shiftLeft = Shift;
        actions.Add($"Reset Dice");
        ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }
}
