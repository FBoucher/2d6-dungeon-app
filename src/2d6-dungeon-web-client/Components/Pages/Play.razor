@page "/play/{adventureId:int}"
@using c5m._2d6Dungeon.web.Domain;
@inject D6Service d6Service;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;
@inject IToastService ToastService;

@rendermode InteractiveServer

<PageTitle>Play</PageTitle>

<FluentButton @onclick="@( () => SaveAventure())" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.Save())" />

<FluentTabs @bind-ActiveTabId="@activeid" OnTabChange="HandleOnTabChange">


    <FluentTab Id="tab-map" Label="Dungeon Map" Icon="@(new Icons.Regular.Size24.Map())">
        <FluentStack Orientation="Orientation.Vertical">

            <FluentAccordion  OnAccordionItemChange="HandleOnAccordionItemChange" Style="width: 100%;">
                <FluentAccordionItem Heading="Current Room Details" Expanded="true">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ConferenceRoom())" Color="@Color.Neutral"
                        Slot="start" />
                    <FluentLabel Typo="Typography.H4">Room:</FluentLabel> @currentRoom!.Description
                    <FluentLabel Typo="Typography.Body">@gameTurnInstructions</FluentLabel> 
                </FluentAccordionItem>
            </FluentAccordion>

            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton @onclick=RollDice Appearance="Appearance.Accent" disabled="@(isRollDiceDisable)">Roll
                    Dice</FluentButton>
                <FluentButton @onclick=PickADoor Appearance="Appearance.Accent">Pick a Door</FluentButton>
            </FluentStack>

            <div style="padding:20px;">
                @if (diceResult.PrimaryDice != 0)
                {
                    <Dice color="Dice.DiceColor.red" size="Dice.DiceSize.regular" face="@diceResult.PrimaryDice" />

                }
                @if (diceResult.SecondaryDice != 0)
                {
                    <Dice color="Dice.DiceColor.purple" size="Dice.DiceSize.regular" face="@diceResult.SecondaryDice" />
                }
            </div>

            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="10">

                <canvas id="dotCanvas" style="width: 800px; height: 800px;"></canvas>

                <div>
                    <FluentStack Orientation="Orientation.Vertical" VerticalGap="10" >

                        <FluentButton @onclick=RefreshCanvas Appearance="Appearance.Accent">Refresh Canvas</FluentButton>

                        
                        <div style="width: 100px;">
                            <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
                                <FluentButton @onclick="@( () => MoveRoom("LEFT"))" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowLeft())" />
                                <FluentStack Orientation="Orientation.Vertical">
                                    <FluentButton @onclick="@( () => MoveRoom("UP"))" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowUp())" />
                                    <FluentButton @onclick="@( () => MoveRoom("DOWN"))" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowDown())" />
                                </FluentStack>
                                <FluentButton @onclick="@( () => MoveRoom("RIGHT"))" Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.ArrowRight())" />
                            </FluentStack> 
                        </div>
                        <FluentLabel Color="@Color.Disabled">Once you have a new room, position it using the arrows above, then pin it to the map with the button below.</FluentLabel>
                        <FluentButton @onclick=AddRoomToDungeon Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.LocationAdd())" /> 
                        <FluentButton @onclick=EditRoom Appearance="Appearance.Accent" IconStart="@(new Icons.Regular.Size16.TargetEdit())" >Edit Room</FluentButton> 
                    </FluentStack>
                </div>
            </FluentStack>
        </FluentStack>

    </FluentTab>


    <FluentTab Id="tab-adventurer" Label="Adventurer" Icon="@(new Icons.Regular.Size24.NotepadPerson())"
        DeferredLoading=true>
        <AdventurerCard @bind-Player="currentAdventure!.Adventurer" Extented="true"></AdventurerCard>
    </FluentTab>


    <FluentTab Id="tab-combat" Label="Combat Screen" Icon="@(new Icons.Regular.Size24.Shield())"
        DeferredLoading=true>
        <Combat @bind-CombatState="currentAdventure!.CombatState"></Combat>
    </FluentTab>

    <FluentTab Id="tab-tables" Label="Tables" Icon="@(new Icons.Regular.Size24.Table())"
        DeferredLoading=true>
        <TableViewer />
    </FluentTab>


    <FluentTab Id="tab-note" Label="Game Notes" Icon="@(new Icons.Regular.Size24.ArchiveSettings())"
        DeferredLoading=true>

        <FluentTextArea @bind-Value=@currentAdventure!.Notes Label="Notes:" Rows="15" style="width: 100%;height: 100%;"/>
    </FluentTab>

</FluentTabs>


@code {

    [Parameter]
    public int adventureId { get; set; }
    private Adventure? currentAdventure;
    MappedRoom? currentRoom = new MappedRoom();
    MappedRoom? nextRoom = new MappedRoom();
    DiceResult diceResult = new DiceResult();

    bool isRollDiceDisable = false;
    string? activeid = "tab-map";
    FluentTab? changedto;

    private string gameTurnInstructions = String.Empty;
    private GameTurn? gameTurn;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //gameTurn = new GameTurn(d6Service);
            gameTurn = new GameTurn();
            gameTurn.d6Service = d6Service;

            if(adventureId > 0)
            {
                currentAdventure = await d6Service.GetAdventure(adventureId);
                currentAdventure.CombatState = new CombatState(currentAdventure.Adventurer);
                currentRoom = currentAdventure.Dungeon.GetRooms().Where<MappedRoom>(room => room.YouAreHere == true).First<MappedRoom>();
                if (currentRoom.IsLobby)
                {
                    gameTurnInstructions = "You are in the lobby, you can go anywhere!";
                }
                await FillCanvas();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MapTools.RefreshCanvas(JSRuntime);
        }
    }

    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }


    private void RollDice()
    {
        var dResult = DiceResult.Roll2Dice();
    }

    private async Task PickADoor()
    {
        Direction? directionTo = await OpenSelectDoorDialogDialogAsync();
        if(directionTo is not null){
            var exit = currentRoom!.Exits[directionTo.Value];

            if (exit.TargetRoomId > 0)
            {
                var destinationRoom = currentAdventure!.Dungeon.GetRoom(exit.TargetRoomId.Value);
                currentAdventure!.Dungeon.ChangeRoom(currentRoom!, destinationRoom!);
                currentRoom = destinationRoom;
                gameTurnInstructions = "You already visited that room, Pick another door!";
                await RefreshCanvas();
                return;
            }
            else if (exit.TargetRoomId == -1)
            {
                gameTurnInstructions = "If you go there you will get out of the dungeon!";
                //TODO: We should manage that better
                return;
            }

            Direction directionFrom = GameTurn.GetOppositeDirection(directionTo.Value);
            var newRoomId = await OpenNewRoomDialog(directionFrom);
            if (newRoomId is not null && newRoomId > 0)
            {
                exit.TargetRoomId = newRoomId;
                gameTurnInstructions = "Proceed with the encounter";
            }
        }
            
    }
    private async Task<Direction?> OpenSelectDoorDialogDialogAsync()
    {
        DialogParameters parameters = new()
            {
                Title = $"To get out of the current room you have {currentRoom!.ExitsCount} options.",
                PrimaryAction = "Open",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        var possibleExits = new DoorSelections(currentRoom.Exits!);


        IDialogReference dialog = await DialogService.ShowDialogAsync<SelectDoorDialog>(possibleExits, parameters);
        DialogResult? result = await dialog.Result;

        if (!result.Cancelled && result.Data != null)
        {
            DoorSelections dSelect = (DoorSelections)result.Data;
            Direction goingTo = dSelect.SelectedExit!.Direction;
            return goingTo;
        }
        else
            return null;            
    }

    private async Task<int?> OpenNewRoomDialog(Direction directionFrom)
    {
        DialogParameters parameters = new()
            {
                Title = $"Let's see what room you are getting in!",
                PrimaryAction = "Save",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel", 
                Width = "800px",
                TrapFocus = true,
                Modal = true
            };

        nextRoom = currentAdventure!.Dungeon.GetNewRoom();


        IDialogReference dialog = await DialogService.ShowDialogAsync<NewRoomDialog>(nextRoom, parameters);
        DialogResult? result = await dialog.Result;

        if (!result.Cancelled)
        {
            nextRoom = result.Data as MappedRoom;
//ID should be there!!!
            //Just temporary
            nextRoom!.CoordX = 20;
            nextRoom.CoordY = 10;

            @* Char entranceWall = directionFrom.ToString()[0]; *@
            GameTurn.SetDungeonEntranceDoor(nextRoom!, directionFrom, currentRoom.Id);
            GameTurn.AssignExits(nextRoom!, directionFrom);
            
            var roomIdTest = nextRoom!.Id;

            await MapTools.DrawRoom(JSRuntime, nextRoom);
            return roomIdTest;
        }
        return null;
    }

    private async Task RenderCanvas()
    {
        await MapTools.RefreshCanvas(JSRuntime);
    }

    private async Task RefreshCanvas()
    {
        await FillCanvas();
    }

    private async Task MoveRoom(string direction)
    {
        switch (direction)
        {
            case "UP":
                nextRoom!.CoordY -= 1;
                break;
            case "DOWN":
                nextRoom!.CoordY += 1;
                break;
            case "LEFT":
                nextRoom!.CoordX -= 1;
                break;
            case "RIGHT":
                nextRoom!.CoordX += 1;
                break;
        }

        await RefreshCanvas();
        await MapTools.DrawRoom(JSRuntime, nextRoom!);
    }


    private async Task AddRoomToDungeon()
    {
        currentAdventure!.Dungeon.AddRoom(nextRoom!);
        currentAdventure!.Dungeon.ChangeRoom(currentRoom!, nextRoom!);
        currentRoom = nextRoom;

        await SaveAventure();

        nextRoom = new MappedRoom();
        await RefreshCanvas();
    }

    private async Task EditRoom()
    {
        var editedRoom = await OpenEditRoomDialog();
        if (editedRoom != null)
        {
            nextRoom = editedRoom;
            await RefreshCanvas();
            await MapTools.DrawRoom(JSRuntime, nextRoom!);
        }
    }

    private async Task<MappedRoom?> OpenEditRoomDialog()
    {
        if (nextRoom != null)
        {     
            DialogParameters parameters = new()
                {
                    Title = $"Edit Room",
                    PrimaryAction = "Save",
                    PrimaryActionEnabled = false,
                    SecondaryAction = "Cancel", 
                    Width = "800px",
                    TrapFocus = true,
                    Modal = true
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<EditRoomDialog>(nextRoom, parameters);
            DialogResult? result = await dialog.Result;

            if (!result.Cancelled)
            {
                nextRoom = result.Data as MappedRoom;
                return nextRoom!;
            }
        }
        return null;
    }


    private async Task FillCanvas()
    {
        await RenderCanvas();
        var rooms = currentAdventure!.Dungeon.GetRooms();
        int roomCount = rooms.Count;

        Console.WriteLine($"There are {roomCount} rooms in the dungeon");

        foreach (var room in rooms)
        {
            await MapTools.DrawRoom(JSRuntime, room);
        }
    }
    FluentAccordionItem? changed;
    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }


    private async Task SaveAventure()
    {
        await d6Service.AdventureSave(currentAdventure);
        ToastService.ShowToast(ToastIntent.Success, "Adventure saved!");
    }
}