@using c5m._2d6Dungeon;
@inject IJSRuntime JSRuntime 

<h3>Adventure Initialization</h3>
<div>To create a new adventure you will need: </div>

<div class="jumbotron">
    @* <h3>Create or select an Adventurer</h3> *@
@if (selectedAdventurer == null)
{
    <AdventurerPicker @bind-ParentPlayer="selectedAdventurer"></AdventurerPicker>
}
else
{
    <div>
        <p><b>Name:</b> @selectedAdventurer.Name</p>
        <p><b>XP:</b> @selectedAdventurer.XP.ToString()</p>
        <p><b>Level:</b> @selectedAdventurer.Level.ToString()</p>
        <p><b>Copper Coins:</b> @selectedAdventurer.Coins.CupperCoins.ToString()</p>
    </div>
}  
</div> 

<div class="row">
    <h3>Create a new Dungeon</h3>

    <div class="row">
        <div class="col-md-12 text-right">
                <p id="message"></p>
        </div>
        <div class="col-md-12 text-right">
            <button type="button" class="btn btn-outline-primary" @onclick=RollDices>@actionLabel</button>
        </div>
    </div>
    <div>
        @if(primaryDice != 0)
        {
            <img alt="@(primaryDice)" src="dices/dice@(primaryDice).jpg" />
        }
        @if(secondaryDice != 0)
        {
            <img alt="@(secondaryDice)" src="dices/purlple-dice@(secondaryDice).jpg" />
        }
    </div>

    <canvas id="dotCanvas" style="width: 800px; height: 500px;"></canvas> 
</div>  

<div class="row">
    <div class="col-md-12 text-right">
        <button type="button" class="btn btn-outline-primary" @onclick="Generate">Generate</button>
        <button type="button" class="btn btn-outline-primary" @onclick="StarGame" disabled="@isStartDisable">Start</button>
    </div>
</div>



@code {

    [Parameter] public Adventure? ParentAdventure {get; set;}

    [Parameter] public EventCallback<Adventure> ParentAdventureChanged { get; set; }

    private Adventure? betaAdventure;
    public Game.Adventurer? selectedAdventurer;
    private bool isStartDisable = false;
    private bool firstRender = true;
    public int primaryDice = 0;
    public int secondaryDice = 0;
    private string actionLabel = "Roll 2D6 to determine the Entrance of the dungeon";
    private MappedRoom entryRoom;

    private void StarGame()
    {
        betaAdventure = new Adventure();
        betaAdventure.Adventurer = selectedAdventurer;

        

        betaAdventure.Dungeon.MappedRooms.Add(entryRoom);
        throw new NotImplementedException();
        //todo: save the adventure
    }

    private void Generate()
    {
        betaAdventure = new Adventure();
        isStartDisable = true;
    }

    private async Task RollDices()
    {
        await RenderCanvas() ;
        var dResult = DiceResult.Roll2Dices();
        primaryDice = dResult.PrimaryDice;
        secondaryDice = dResult.SecondaryDice;
        entryRoom = Dungeon.StartDungeonLevel(dResult);

        //hardcoded temporary
        entryRoom.CoordX = 2;
        entryRoom.CoordY = 2;

        SetDungeonEntranceDoor(entryRoom);
        await DrawRoom(entryRoom);
        
        actionLabel = "The lobby has 3 exits";
    }

    private async Task RenderCanvas() 
    { 
        if (firstRender) 
        { 
            firstRender = false;
            await JSRuntime.InvokeVoidAsync("onResize");
        } 
    }

    protected async Task DrawRoom(MappedRoom currentRoom) 
    { 
        //int cubeSize = 30;

        int gidX = (currentRoom.CoordX);
        int gidY = (currentRoom.CoordY);

        await JSRuntime.InvokeVoidAsync("DrawRoom",gidX, gidY, currentRoom.Width, currentRoom.Height);

        await DrawDoors(currentRoom);
    }

    protected async Task DrawDoors(MappedRoom currentRoom) 
    { 
        @* int cubeSize = 30; *@


        foreach(var door in currentRoom.Exits)
        {
            string orientation = GetDoorOrientation(door.onWall);
            int x = 0;
            int y = 0;

            switch(door.onWall)
            {
                case "N":
                    x = currentRoom.CoordX;
                    y = currentRoom.CoordY + door.PositionOnWall;
                    break;
                case "E":
                    x = currentRoom.CoordX + currentRoom.Width;
                    y = currentRoom.CoordY + door.PositionOnWall;
                    break;
                case "S":
                    x = currentRoom.CoordX + door.PositionOnWall;
                    y = currentRoom.CoordY + currentRoom.Height;
                    break;
                case "W":
                    x = currentRoom.CoordX + door.PositionOnWall;
                    y = currentRoom.CoordY;
                    break;
            }

            int gidX = x;
            int gidY = y;

            await JSRuntime.InvokeVoidAsync("DrawDoor",gidX, gidY, orientation);
        }

        
    }

    protected string GetDoorOrientation(string onWall)
    {
        if(onWall == "S" || onWall == "N")
        {
            return "H";
        }
        return "V";
    }

    protected void SetDungeonEntranceDoor(MappedRoom currentRoom)
    {
        var mainDoor = new Exit();
        mainDoor.onWall = "S";
        mainDoor.PositionOnWall = (int) Math.Ceiling( (double)currentRoom.Width/2 );
        mainDoor.Lockable = false;

        if(currentRoom.Exits == null)
            currentRoom.Exits = new List<Exit>();
        currentRoom.Exits.Add( mainDoor);
    }

    @* protected async Task AssignExits(MappedRoom currentRoom, string entrance, int nbExits)
    {

    } *@

}
