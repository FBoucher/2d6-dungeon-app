@page "/play/{adventureId:int}"
@using c5m._2d6Dungeon.web.Domain;
@inject D6Service d6Service;
@inject IJSRuntime JSRuntime;
@inject IDialogService DialogService;

@rendermode InteractiveServer

<PageTitle>Play</PageTitle>

<FluentTabs @bind-ActiveTabId="@activeid" OnTabChange="HandleOnTabChange">


    <FluentTab Id="tab-map" Label="Dungeon Map" Icon="@(new Icons.Regular.Size24.Map())">
        <FluentStack Orientation="Orientation.Vertical">

            <FluentAccordion  OnAccordionItemChange="HandleOnAccordionItemChange" Style="width: 100%;">
                <FluentAccordionItem Heading="Current Room Details" Expanded="true">
                    <FluentIcon Value="@(new Icons.Regular.Size20.ConferenceRoom())" Color="@Color.Neutral"
                        Slot="start" />
                    <FluentLabel Typo="Typography.H4">Room:</FluentLabel> @currentRoom!.Description
                    <FluentLabel Typo="Typography.Body">@gameTurnInstructions</FluentLabel> 
                </FluentAccordionItem>
            </FluentAccordion>

            <FluentStack Orientation="Orientation.Horizontal">
                <FluentButton @onclick=RollDices Appearance="Appearance.Accent" disabled="@(isRollDicesDisable)">Roll
                    Dices</FluentButton>
                <FluentButton @onclick=PickADoor Appearance="Appearance.Accent">Pick a Door</FluentButton>
            </FluentStack>

            <div style="padding:20px;">
                @if (diceResult.PrimaryDice != 0)
                {
                    <Dices color="Dices.DiceColor.red" size="Dices.DiceSize.regular" face="@diceResult.PrimaryDice" />

                }
                @if (diceResult.SecondaryDice != 0)
                {
                    <Dices color="Dices.DiceColor.purple" size="Dices.DiceSize.regular" face="@diceResult.SecondaryDice" />
                }
            </div>

            <canvas id="dotCanvas" style="width: 800px; height: 800px;"></canvas>

            <FluentButton @onclick=RefreshCanvas Appearance="Appearance.Accent">Refresh Canvas</FluentButton>
        </FluentStack>

    </FluentTab>


    <FluentTab Id="tab-adventurer" Label="Adventurer" Icon="@(new Icons.Regular.Size24.NotepadPerson())"
        DeferredLoading=true>
        <AdventurerCard @bind-Player="currentAdventure!.Adventurer" Extented="true"></AdventurerCard>
    </FluentTab>


    <FluentTab Id="tab-combat" Label="Combat Screen" Icon="@(new Icons.Regular.Size24.Shield())"
        DeferredLoading=true>
        <Combat @bind-CombatState="currentAdventure!.CombatState"></Combat>
    </FluentTab>


    <FluentTab Id="tab-stuff" Label="Other Stuff" Icon="@(new Icons.Regular.Size24.ArchiveSettings())"
        DeferredLoading=true>
        Tab three content. This is for testing.
    </FluentTab>

</FluentTabs>


@code {

    [Parameter]
    public int adventureId { get; set; }
    private Adventure? currentAdventure;
    MappedRoom? currentRoom = new MappedRoom();

    @* int primaryDice = 0;
    int secondaryDice = 0; *@
    DiceResult diceResult = new DiceResult();

    bool isRollDicesDisable = false;
    string? activeid = "tab-map";
    FluentTab? changedto;

    private string gameTurnInstructions = String.Empty;
    private GameTurn? gameTurn;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            //gameTurn = new GameTurn(d6Service);
            gameTurn = new GameTurn();
            gameTurn.d6Service = d6Service;

            currentAdventure = await d6Service.GetAdventure(adventureId);
            currentAdventure.CombatState = new CombatState(currentAdventure.Adventurer);
            currentRoom = currentAdventure.Dungeon.MappedRooms.Where<MappedRoom>(room => room.IsLobby == true).First<MappedRoom>();
            gameTurnInstructions = "Press Roll Dices to roll the dimentions and pick a door to enter the next room.";
            await FillCanvas();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await MapTools.RefreshCanvas(JSRuntime);
        }
    }

    private void HandleOnTabChange(FluentTab tab)
    {
        changedto = tab;
    }


    private void RollDices()
    {
        var dResult = DiceResult.Roll2Dices();
    }

    private async Task PickADoor()
    {
        await OpenSelectDoorDialogDialogAsync();
        await OpenNewRoomDialog();
    }
    private async Task OpenSelectDoorDialogDialogAsync()
    {
        DialogParameters parameters = new()
            {
                Title = $"To get out of the current room you have {currentRoom!.ExitsCount} options.",
                PrimaryAction = "Open",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel",
                Width = "500px",
                TrapFocus = true,
                Modal = true,
                PreventScroll = true
            };

        DoorSelections dSelect = new DoorSelections(currentRoom.Exits!);

        IDialogReference dialog = await DialogService.ShowDialogAsync<SelectDoorDialog>(dSelect, parameters);
        DialogResult? result = await dialog.Result;

        if (result.Data is not null)
        {
            DoorSelections? doorSelection = result.Data as DoorSelections;
            @* this.gameTurn.NextAction = ActionType.RollForARoom;
            var currentDice = this.gameTurn.ContinueTurn(diceResult); *@

        }
    }

    private async Task OpenNewRoomDialog()
    {
        DialogParameters parameters = new()
            {
                Title = $"Let's see what room you are getting in!",
                PrimaryAction = "Save",
                PrimaryActionEnabled = false,
                SecondaryAction = "Cancel", 
                Width = "800px",
                TrapFocus = true,
                Modal = true
            };

        //MappedRoom newRoom = new MappedRoom();

        IDialogReference dialog = await DialogService.ShowDialogAsync<NewRoomDialog>(new MappedRoom(), parameters);
        DialogResult? result = await dialog.Result;

        if (result.Data is not null)
        {
            MappedRoom? createdRoom = result.Data as MappedRoom;

            //Just temporary
            createdRoom!.CoordX = 20;
            createdRoom.CoordY = 10;

            currentAdventure!.Dungeon.MappedRooms.Add(createdRoom!);
            await RefreshCanvas();
        }


    }

    private async Task RenderCanvas()
    {
        await MapTools.RefreshCanvas(JSRuntime);
    }

    private async Task RefreshCanvas()
    {
        await FillCanvas();
    }

    private async Task FillCanvas()
    {
        await RenderCanvas();
        foreach (var room in currentAdventure!.Dungeon.MappedRooms)
        {
            if (room.IsLobby == false)
            {
                continue; // help while debugging
            }
            await MapTools.DrawRoom(JSRuntime, room);
        }
    }
    FluentAccordionItem? changed;
    private void HandleOnAccordionItemChange(FluentAccordionItem item)
    {
        changed = item;
    }

}