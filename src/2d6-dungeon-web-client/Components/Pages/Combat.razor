@using c5m._2d6Dungeon;

@rendermode InteractiveServer

<h3>Combat Screen</h3>

@if(creature == null)
{
    <FluentLabel Typo="Typography.Body">Select the creature mentioned in the room description.</FluentLabel>
    <CreaturePicker ParentCreature="creature" ParentCreatureChanged="CreatureUpdated" ></CreaturePicker>
}
else{
    <FluentStack Orientation="Orientation.Vertical"  Width="100%" >

        <h3>Turn @turnCounter</h3>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2" >
            <ShiftButtons   rolledValue="@primaryDice"
                            shiftedValue="@primaryShiftedDice"  
                            ShiftLeft="@shiftLeft" 
                            DiceShifted="PrimaryDiceShifted"></ShiftButtons>
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" HorizontalGap="0" Width="145">
                <span>
                    <Dices color="Dices.DiceColor.red" size="Dices.DiceSize.regular" face="primaryShiftedDice" />
                    <Dices color="Dices.DiceColor.purple" size="Dices.DiceSize.regular" face="secondaryShiftedDice" />
                </span>
                @shiftLeft shift left
                <FluentButton Appearance="Appearance.Accent" @onclick=Roll2Dices IconStart="@(new Icons.Regular.Size16.Cube())">Roll</FluentButton>
            </FluentStack>
            <ShiftButtons   rolledValue="@secondaryDice" 
                            shiftedValue="@secondaryShiftedDice" 
                            ShiftLeft="@shiftLeft" 
                            DiceShifted="SecondaryDiceShifted"></ShiftButtons>
            <FluentSpacer Width="200"></FluentSpacer>
            <FluentButton Appearance="Appearance.Accent" @onclick=ResetDices IconStart="@(new Icons.Regular.Size16.ArrowCircleLeft())">Reset Dice</FluentButton>
            <FluentButton Appearance="Appearance.Accent" @onclick=NextTurn IconStart="@(new Icons.Regular.Size16.ArrowNext())">End Turn</FluentButton>
        </FluentStack>




        <FluentStack Orientation="Orientation.Horizontal" Width="100%">
            <FluentCard Width="600px"> 
                <AdventurerCard Player="player" Extented=true></AdventurerCard>
            </FluentCard>
            <FluentCard Width="400px">
                <QuickReferenceCombatCard   TurnCounter="@turnCounter" 
                                            ShiftAdjustment="@adjustmentShift" >
                </QuickReferenceCombatCard>
            </FluentCard>
            <FluentCard Width="400px">
                <CreatureCard creature="creature"></CreatureCard> 
            </FluentCard>
        </FluentStack>
        <CombatJournal actions="combatActions" ></CombatJournal>
    </FluentStack>
}


@code {
    [Parameter]
    public required Game.Adventurer player { get; set; }

    [Parameter] 
    public EventCallback<Game.Adventurer> PlayerChanged { get; set; }

    public IEnumerable<Creature>? creatures { get; set; }
    public Creature? creature { get; set; }

    private List<string> combatActions = new List<string>();

    private int turnCounter = 1;
    private int adjustmentShift = 0;
    private int adjustedShift = 0;

    

    private DiceResult? originalDices;
    private int shiftLeft = 0;

    private int primaryDice = 0;
    private int primaryShiftedDice = 0;
    private int secondaryDice = 0;
    private int secondaryShiftedDice = 0;



    protected override void OnInitialized()
    {
        adjustedShift = player.Shift;
    }
    private void CombatTurnChanged(int turn){

        turnCounter = turn;

        if(turn < 7)
        {
            switch(turn)
            {
                case 4:
                    adjustmentShift = 1;
                    break;
                case 5:
                    adjustmentShift = 2;
                    break;
                case 6:
                    adjustmentShift = 3;
                    break;
            }

            if (adjustmentShift > 0)
                combatActions.Add($"Shift as been ajusted by {adjustmentShift} due to fatigue reaching {turn}");

            adjustedShift = player.Shift + adjustmentShift;
        }
        
    }

    private void Roll2Dices()
    {
        var dices = originalDices = DiceResult.Roll2Dices();
        primaryDice = primaryShiftedDice = dices.PrimaryDice;
        secondaryDice = secondaryShiftedDice = dices.SecondaryDice;

        combatActions.Add($"Rolled {primaryDice} and {secondaryDice}");
        
        shiftLeft = GetShiftLeftValue();

        StateHasChanged();
    }

    private void NextTurn()
    {
        combatActions.Add($"End Turn {turnCounter}");
        turnCounter++;
        primaryDice = primaryShiftedDice = 0;
        secondaryDice = secondaryShiftedDice = 0;
        
        combatActions.Add($"Start Turn {turnCounter}");
        CombatTurnChanged(turnCounter);
        shiftLeft = adjustedShift;
        StateHasChanged();
    }

    private void CreatureUpdated(Creature selectedCreature)
    {
        creature = selectedCreature;
    }


    private async Task PrimaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = primaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            primaryShiftedDice++;
        }
        else
        {
            primaryShiftedDice--;
        }
        combatActions.Add($"Primary dice Shifted from {preValue} to {primaryDice}");
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private async Task SecondaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = secondaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            secondaryShiftedDice++;
        }
        else
        {
            secondaryShiftedDice--;
        }
        combatActions.Add($"Secondary dice Shifted from {preValue} to {secondaryDice}");
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private int GetShiftLeftValue(){
        var pDiceMovs = Math.Abs(primaryDice - primaryShiftedDice);
        var sDiceMovs = Math.Abs(secondaryDice - secondaryShiftedDice);
        var movLeft = adjustedShift - pDiceMovs - sDiceMovs;
        return movLeft;
        //return adjustedShift - Math.Abs(primaryDice - primaryShiftedDice) - Math.Abs(secondaryDice - secondaryShiftedDice);
    }

    private void ResetDices()
    {
        primaryDice = primaryShiftedDice = originalDices?.PrimaryDice ?? 0;
        secondaryDice = secondaryShiftedDice = originalDices?.SecondaryDice ?? 0;
        shiftLeft = adjustedShift;
        combatActions.Add($"Reset Dices");
        StateHasChanged();
    }
}
