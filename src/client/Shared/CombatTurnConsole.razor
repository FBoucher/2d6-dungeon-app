<h3>Turn @TurnCounter</h3>
<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2" >
    <ShiftButtons   rolledValue="@primaryDice"
                    shitedValue="@primaryShiftedDice"  
                    shiftLeft="@shiftLeft" 
                    DiceShifted="PrimaryDiceShifted"></ShiftButtons>
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" HorizontalGap="0" Width="145">
        <span>
            <DiceSet color="DiceSet.DiceColor.red" size="DiceSet.DiceSize.regular" face="@primaryShiftedDice" />
            <DiceSet color="DiceSet.DiceColor.purple" size="DiceSet.DiceSize.regular" face="@secondaryShiftedDice" />
        </span>
        @shiftLeft shift left
        <FluentButton Appearance="Appearance.Accent" @onclick=Roll2Dices IconStart="@(new Icons.Regular.Size16.Cube())">Roll</FluentButton>
    </FluentStack>
    <ShiftButtons   rolledValue="@secondaryDice" 
                    shitedValue="@secondaryShiftedDice" 
                    shiftLeft="@shiftLeft" 
                    DiceShifted="SecondaryDiceShifted"></ShiftButtons>
    <FluentSpacer Width="200"></FluentSpacer>
    <FluentButton Appearance="Appearance.Accent" @onclick=NextTurn IconStart="@(new Icons.Regular.Size16.ArrowNext())">End Turn</FluentButton>
</FluentStack>




@code {

    [Parameter]
    public required List<string> actions { get; set; }

    [Parameter]
    public EventCallback<List<string>> ActionsChanged { get; set; }

    [Parameter]
    public int TurnCounter { get; set; } = 1;

    [Parameter]
    public EventCallback<int> TurnCounterChanged { get; set; }

    [Parameter]
    public int Shift { get; set; } = 0;

    [Parameter]
    public EventCallback<int> ShiftChanged { get; set; }


    private int primaryDice = 0;
    private int primaryShiftedDice = 0;
    private int secondaryDice = 0;
    private int secondaryShiftedDice = 0;

    //private int shift = 0;
    private int shiftLeft = 0;
    protected override void OnInitialized()
    {
        shiftLeft = Shift;
    }
    private void Roll2Dices()
    {
        var dices = DiceResult.Roll2Dices();
        primaryDice = primaryShiftedDice = dices.PrimaryDice;
        secondaryDice = secondaryShiftedDice = dices.SecondaryDice;

        actions.Add($"Rolled {primaryDice} and {secondaryDice}");
        ActionsChanged.InvokeAsync(actions);

        StateHasChanged();
    }

    private void NextTurn()
    {
        actions.Add($"End Turn {TurnCounter}");
        TurnCounter++;
        TurnCounterChanged.InvokeAsync(TurnCounter);
        primaryDice = primaryShiftedDice = 0;
        secondaryDice = secondaryShiftedDice = 0;
        shiftLeft = Shift;
        actions.Add($"Start Turn {TurnCounter}");
        ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }

    private async Task PrimaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = primaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            primaryShiftedDice++;
        }
        else
        {
            primaryShiftedDice--;
        }
        actions.Add($"Primary dice Shifted from {preValue} to {primaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private async Task SecondaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = secondaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            secondaryShiftedDice++;
        }
        else
        {
            secondaryShiftedDice--;
        }
        actions.Add($"Secondary dice Shifted from {preValue} to {secondaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private int GetShiftLeftValue(){
        return Shift - Math.Abs(primaryDice - primaryShiftedDice) - Math.Abs(secondaryDice - secondaryShiftedDice);
    }
}
