@using c5m._2d6Dungeon;

@rendermode InteractiveServer

<h3>Combat Screen</h3>

@if(CombatState.Creature == null)
{
    <FluentLabel Typo="Typography.Body">Select the creature mentioned in the room description.</FluentLabel>
    <CreaturePicker ParentCreature="CombatState.Creature" ParentCreatureChanged="CreatureUpdated" ></CreaturePicker>
}
else{
    <FluentStack Orientation="Orientation.Vertical"  Width="100%" >

        <h3>Turn @CombatState.TurnCounter</h3>
        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2" >
            <ShiftButtons   rolledValue="@primaryDice"
                            shiftedValue="@primaryShiftedDice"  
                            ShiftLeft="@shiftLeft" 
                            DiceShifted="PrimaryDiceShifted"></ShiftButtons>
            <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" HorizontalGap="0" Width="145">
                <span>
                    <Dice color="Dice.DiceColor.red" size="Dice.DiceSize.regular" face="primaryShiftedDice" />
                    <Dice color="Dice.DiceColor.purple" size="Dice.DiceSize.regular" face="secondaryShiftedDice" />
                </span>
                @shiftLeft shift left
                <span>
                    <FluentButton Appearance="Appearance.Accent" @onclick=Roll2Dice IconStart="@(new Icons.Regular.Size16.Cube())">Roll</FluentButton>
                    <FluentButton Appearance="Appearance.Accent" @onclick=ResetDice IconStart="@(new Icons.Regular.Size16.ArrowCounterclockwise())" 
                                    Title="Resets the Dice before any shift adjustment" >Reset</FluentButton>
                </span>
            </FluentStack>
            <ShiftButtons   rolledValue="@secondaryDice" 
                            shiftedValue="@secondaryShiftedDice" 
                            ShiftLeft="@shiftLeft" 
                            DiceShifted="SecondaryDiceShifted"></ShiftButtons>
            <FluentSpacer Width="200"></FluentSpacer>
            <FluentButton Appearance="Appearance.Accent" @onclick=NextTurn IconStart="@(new Icons.Regular.Size16.ArrowNext())">End Turn</FluentButton>
        </FluentStack>




        <FluentStack Orientation="Orientation.Horizontal" Width="100%">
            <FluentCard Width="600px"> 
                <AdventurerCard Player="CombatState.Player" Extented=true></AdventurerCard>
            </FluentCard>
            <FluentCard Width="400px">
                <QuickReferenceCombatCard   TurnCounter="@CombatState.TurnCounter" 
                                            ShiftAdjustment="@adjustmentShift" >
                </QuickReferenceCombatCard>
            </FluentCard>
            <FluentCard Width="400px">
                <CreatureCard creature="CombatState.Creature"></CreatureCard> 
            </FluentCard>
        </FluentStack>
        <CombatJournal actions="CombatState.CombatActions" ></CombatJournal>
    </FluentStack>
}


@code {
    [Parameter]
    public required CombatState CombatState { get; set; }

    [Parameter] 
    public EventCallback<CombatState> CombatStateChanged { get; set; }


    @* public IEnumerable<Creature>? creatures { get; set; } *@
    
    private int adjustmentShift = 0;
    private int adjustedShift = 0;
    private DiceResult? originalDice;
    private int shiftLeft = 0;
    private int primaryDice = 0;
    private int primaryShiftedDice = 0;
    private int secondaryDice = 0;
    private int secondaryShiftedDice = 0;



    protected override void OnInitialized()
    {
        adjustedShift = CombatState.Player.Shift;
        if (CombatState.TurnCounter == 0){
            CombatTurnChanged(1);
        }
    }
    private void CombatTurnChanged(int turn){

        CombatState.TurnCounter = turn;

        if(turn < 7)
        {
            switch(turn)
            {
                case 4:
                    adjustmentShift = 1;
                    break;
                case 5:
                    adjustmentShift = 2;
                    break;
                case 6:
                    adjustmentShift = 3;
                    break;
            }

            if (adjustmentShift > 0)
                CombatState.CombatActions.Add($"Shift as been ajusted by {adjustmentShift} due to fatigue reaching {turn}");

            adjustedShift = CombatState.Player.Shift + adjustmentShift;
        }
        CombatStateChanged.InvokeAsync(CombatState);
    }

    private void Roll2Dice()
    {
        var dice = originalDice = DiceResult.Roll2Dice();
        primaryDice = primaryShiftedDice = dice.PrimaryDice;
        secondaryDice = secondaryShiftedDice = dice.SecondaryDice;

        CombatState.CombatActions.Add($"Rolled {primaryDice} and {secondaryDice}");
        
        shiftLeft = GetShiftLeftValue();

        StateHasChanged();
    }

    private void NextTurn()
    {
        CombatState.TurnCounter++;
        primaryDice = primaryShiftedDice = 0;
        secondaryDice = secondaryShiftedDice = 0;
        
        CombatState.CombatActions.Add($"Start Turn {CombatState.TurnCounter}");
        CombatTurnChanged(CombatState.TurnCounter);
        shiftLeft = adjustedShift;
        CombatStateChanged.InvokeAsync(CombatState);
        StateHasChanged();
    }

    private void CreatureUpdated(Creature selectedCreature)
    {
        CombatState.Creature = selectedCreature;
        CombatStateChanged.InvokeAsync(CombatState);
    }


    private void PrimaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = primaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            primaryShiftedDice++;
        }
        else
        {
            primaryShiftedDice--;
        }
        CombatState.CombatActions.Add($"Primary dice Shifted from {preValue} to {primaryDice}");
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private void SecondaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = secondaryShiftedDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            secondaryShiftedDice++;
        }
        else
        {
            secondaryShiftedDice--;
        }
        CombatState.CombatActions.Add($"Secondary dice Shifted from {preValue} to {secondaryDice}");
        shiftLeft = GetShiftLeftValue();
        StateHasChanged();
    }

    private int GetShiftLeftValue(){
        var pDiceMovs = Math.Abs(primaryDice - primaryShiftedDice);
        var sDiceMovs = Math.Abs(secondaryDice - secondaryShiftedDice);
        var movLeft = adjustedShift - pDiceMovs - sDiceMovs;
        return movLeft;
        //return adjustedShift - Math.Abs(primaryDice - primaryShiftedDice) - Math.Abs(secondaryDice - secondaryShiftedDice);
    }

    private void ResetDice()
    {
        primaryDice = primaryShiftedDice = originalDice?.PrimaryDice ?? 0;
        secondaryDice = secondaryShiftedDice = originalDice?.SecondaryDice ?? 0;
        shiftLeft = adjustedShift;
        CombatState.CombatActions.Add($"Reset Dice");
        StateHasChanged();
    }


}
