@using c5m._2d6Dungeon;
@using System.Text.Json;
@inject D6Service D6Service;
@inject NavigationManager Navigation;

@rendermode InteractiveServer

@if (adventurers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <FluentStack Orientation="Orientation.Vertical">

        <FluentDataGrid Items="@adventurersQueryable">
            <TemplateColumn Title="">
                <FluentButton @onclick="@(() => SelectPlayer(context.id))" Appearance="Appearance.Lightweight">Select</FluentButton>
            </TemplateColumn>
            <PropertyColumn Title="Name" Property="@(c => c.name)" Sortable="true" />
            <PropertyColumn Title="XP" Property="@(c => c.xp.ToString())" Sortable="true"/>
            <PropertyColumn Title="Level" Property="@(c => c.level.ToString())" Sortable="true" />
        </FluentDataGrid>
    

        <FluentButton @onclick=CreateNewAdventurer Appearance="Appearance.Accent">New</FluentButton>
    
    </FluentStack>
}

@code {

    private AdventurerPreviewList? adventurers;
    IQueryable<AdventurerPreview>? adventurersQueryable;

    [Parameter] public Game.Adventurer? ParentPlayer {get; set;}

    [Parameter] public EventCallback<Game.Adventurer> ParentPlayerChanged { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try{
            adventurers = await D6Service.GetAdventurerPreviews();  
            adventurersQueryable = adventurers.value.AsQueryable();  
        }
        catch(Exception ex){
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }

    
    private void CreateNewAdventurer(MouseEventArgs e)
    {
        Navigation.NavigateTo("adventurer/new");
    }
    private async Task SelectPlayer(int playerId)
    {
        try{
            ParentPlayer = await D6Service.GetAdventurer(playerId);
            await ParentPlayerChanged.InvokeAsync(ParentPlayer);
        }
        catch(Exception ex){
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }
}
