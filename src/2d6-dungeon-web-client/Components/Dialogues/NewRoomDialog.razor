@implements IDialogContentComponent<MappedRoom>
@inject IJSRuntime JSRuntime 
@inject D6Service d6Service;

@rendermode InteractiveServer



<FluentWizard StepperPosition="StepperPosition.Left"
              StepSequence="WizardStepSequence.Linear"
              DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)"
              Border="WizardBorder.Outside"
              StepTitleHiddenWhen="@GridItemHidden.XsAndDown"
              Height="300px"
              OnFinish="@OnFinishedAsync">

    <Steps>
        <FluentWizardStep   Label="Dimensions"
                            Summary="Determine the dimension of the room"
                          OnChange="@OnStepChange">
            <FluentStack Orientation="Orientation.Vertical">
                <p>@(gameTurn!.Message ?? string.Empty)</p>
                <FluentButton @onclick=RollDiceForRoomDimensions Appearance="Appearance.Accent" disabled="@(isSizeSet)">Roll 2D6 </FluentButton>

                <div style="padding:20px;">
                    @if(sizeDiceResult != null)
                    {
                        <Dice  face="@sizeDiceResult.PrimaryDice" size="Dice .DiceSize.regular" color="Dice .DiceColor.red"></Dice >
                        <Dice  face="@sizeDiceResult.SecondaryDice" size="Dice .DiceSize.regular" color="Dice .DiceColor.purple"></Dice >
                    }
                </div>
            </FluentStack>
        </FluentWizardStep>
        <FluentWizardStep Label="Exits"
                          Summary="Determines the number of exits in the room"
                          OnChange="@OnStepChange">
            <FluentStack Orientation="Orientation.Vertical">
                <p>@(gameTurn!.Message ?? string.Empty)</p>
                <FluentButton @onclick=RollDiceForExits Appearance="Appearance.Accent" disabled="@(isExitsSet)">Roll 1D6</FluentButton>

                <div style="padding:20px;">
                    @if(exitsDiceResult != null)
                    {
                        <Dice  face="@exitsDiceResult.PrimaryDice" size="Dice.DiceSize.regular" color="Dice.DiceColor.red"></Dice>
                    }
                </div>
            </FluentStack>
        </FluentWizardStep>
        <FluentWizardStep Label="Description"
                          Summary="Determine what is in the room"
                          IconPrevious="@(new Icons.Filled.Size24.Star())"
                          IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())"
                          IconNext="@(new Icons.Regular.Size24.Star())"
                          DisplayStepNumber="false"
                          OnChange="@OnStepChange"
                          Disabled="@(isCorridor)">
            <FluentStack Orientation="Orientation.Vertical">
                <p>@(gameTurn!.Message ?? string.Empty)</p>
                <FluentButton @onclick=RollDiceForDescription Appearance="Appearance.Accent" disabled="@(isDescriptionSet)">Roll 2 Dice</FluentButton>

                <div style="padding:20px;">
                    @if(DescriptionDiceResult != null)
                    {
                        <Dice face="@DescriptionDiceResult.PrimaryDice" size="Dice.DiceSize.regular" color="Dice.DiceColor.red"></Dice>
                        <Dice face="@DescriptionDiceResult.SecondaryDice" size="Dice.DiceSize.regular" color="Dice.DiceColor.purple"></Dice>
                    }
                </div>
            </FluentStack>
        </FluentWizardStep>
        <FluentWizardStep   Label="Summary"
                            Summary="Summary of the new room"
                            OnChange="@OnStepChange">
            <div style="padding:20px;">
            @if(isSizeSet && isExitsSet && isDescriptionSet)
            {
                <p>The room is @gameTurn.CurrentRoom!.Width by @gameTurn.CurrentRoom.Height</p>
                <p>Excluding the door you used to gameTurn in there @gameTurn.CurrentRoom.ExitsCount other door(s)</p>
                <p>@gameTurn.CurrentRoom.Description</p>
            }
            </div>
        </FluentWizardStep>
    </Steps>
</FluentWizard>

@code {

    [Parameter]
    public required MappedRoom Content { get; set; } = default!;

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; } = default!;

    private GameTurn gameTurn = new GameTurn();

    private ActionType currentAction = ActionType.RollForARoom;
    private DiceResult? sizeDiceResult = null;
    private DiceResult? exitsDiceResult = null;
    private DiceResult? DescriptionDiceResult = null;
    private bool isSizeSet = false;
    private bool isExitsSet = false;
    private bool isDescriptionSet = false;
    private bool isCorridor = false;

    protected override void OnInitialized()
    {
        gameTurn.d6Service = d6Service;
        gameTurn.Message = "Roll 2D6 to determine the dimension of the room";
        gameTurn.CurrentRoom = Content;
        
        //await MapTools.RefreshCanvas(JSRuntime);
    }

    void OnStepChange(FluentWizardStepChangeEventArgs e)
    {
        Console.WriteLine($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
        switch(e.TargetIndex){
            case 0:
                gameTurn.Message = "Roll 2D6 to determine the dimension of the room";
                break;
            case 1:
                gameTurn.Message = "Roll 1D6 to determines the number of exits in the room";
                break;
            case 2:
                gameTurn.Message = "Roll 2D6 to know what's in that room";
                break;
            case 3:
                Dialog!.TogglePrimaryActionButton(true);
                break;
        }
    }

    private async Task OnFinishedAsync()
    {
        Content = gameTurn.CurrentRoom!;
        await Dialog!.CloseAsync(Content);
    }

    private async Task RollDiceForRoomDimensions()
    {
        sizeDiceResult = DiceResult.Roll2Dice();
        
        await gameTurn.ContinueTurn(sizeDiceResult);
        if(gameTurn.NextAction != ActionType.DoubleSizedRoom)
        {
            isSizeSet = true;
            if(gameTurn.CurrentRoom!.IsCorridor)
            {
                gameTurn.CurrentRoom.Description = "You found a corridor";
                isDescriptionSet = true;
                isCorridor = true;
            }
        }
    }

    private async Task RollDiceForExits()
    {
        exitsDiceResult = DiceResult.Roll1Dice();
        gameTurn.NextAction = ActionType.RollForExits;
        await gameTurn.ContinueTurn(exitsDiceResult);
        isExitsSet = true;
    }

    private async Task RollDiceForDescription()
    {
        DescriptionDiceResult = DiceResult.Roll2Dice();
        gameTurn.NextAction = ActionType.RollRoomDefinition;
        await gameTurn.ContinueTurn(DescriptionDiceResult);
        isDescriptionSet = true;
    }

    private async Task SaveAsync()
    {
        await Dialog!.CloseAsync(Content);
    }

}
