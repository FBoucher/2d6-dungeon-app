@page "/"
@using c5m._2d6Dungeon;
@inject ID6Service D6Service;
@inject IJSRuntime JSRuntime 


<PageTitle>Home</PageTitle>

@if (player == null)
{
    <AdventurerPicker @bind-ParentPlayer="player"></AdventurerPicker>
}
else
{
    <div>
        <p><b>Name:</b> @player.Name</p>
        <p><b>XP:</b> @player.XP.ToString()</p>
        <p><b>Level:</b> @player.Level.ToString()</p>
        <p><b>Copper Coins:</b> @player.Coins.CupperCoins.ToString()</p>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
            <button type="button" class="btn btn-outline-primary" @onclick="StarGame" disabled="@isStartDisable">Start</button> | 
            <button type="button" class="btn btn-outline-primary" @onclick="SaveGame" disabled="@isSaveDisable">Save</button>
        </div>
    </div>
    <br/>
    <div class="row">
        @if(currentTurn != null)
        {
            <div class="col-md-12 text-right">
                <p id="message">@currentTurn.Message</p>
            </div>
            <div class="col-md-12 text-right">
                <button type="button" class="btn btn-outline-primary" @onclick=DoTurnAction>@actionLabel</button>
            </div>
        }
    </div>
    <br/>
    <div>
        @if(primaryDice != 0)
        {
            <img src="dices/dice@(primaryDice).jpg" />
        }
        @if(secondaryDice != 0)
        {
            <img src="dices/dice@(secondaryDice).jpg" />
        }
    </div>
    <br/>
    @* @if(currentTurn != null && currentTurn.CurrentRoom != null)
    { *@
        <canvas id="dotCanvas" style="width: 500px; height: 200px;"></canvas> 
    @* } *@

}


@code {
    public Adventurer? player;
    public GameTurn? currentTurn;
    public int primaryDice = 0;
    public int secondaryDice = 0;

    public bool isStartDisable = false;
    public bool isSaveDisable = true;
    private string actionLabel = string.Empty;
    private bool firstRender = true;


    private void StarGame()
    {
        if (player != null)
        {
            currentTurn = new GameTurn();
            isStartDisable = true;
            isSaveDisable = false;
            SetNextActionLabel();
        }
    }

    private async Task SaveGame()
    {
        try
        {
            if (player != null)
            {
                player = fakeActivity(player);
                await D6Service.SaveAdventurer(player);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }

    private void SetNextActionLabel(){
        switch(currentTurn.NextAction)
        {
            case(ActionType.RollForARoom): 
                actionLabel = "Roll 2D6 to determine the size of the room.";
                break;
            case(ActionType.RollForExits): 
                actionLabel = "Roll 1D6 to determine the number of exists.";
                break;   
            case(ActionType.DoubleSizedRoom): 
                actionLabel = "Roll again 2D6.";
                break;   
            case(ActionType.DrawRoom): 
                actionLabel = "Roll 2D6 to see what's in that room.";
                break;   
        }
    }

    private Adventurer fakeActivity(Adventurer adventurer){
        // Simulate activity to help debuging ;)
        adventurer.XP++;
        adventurer.Coins.CupperCoins++;
        return adventurer;
    }
    private async Task DoTurnAction()
    {
        await RenderCanvas() ;
        var dResult = DiceResult.Roll2Dices();
        primaryDice = dResult.PrimaryDice;
        secondaryDice = dResult.SecondaryDice;
        currentTurn.ContinueTurn(dResult);
        SetNextActionLabel();
    }

    private async Task RenderCanvas() 
    { 
        if (firstRender) 
        { 
            firstRender = false;
            await JSRuntime.InvokeVoidAsync("onResize");
        } 
    } 


}