<h3>Turn @turnCounter</h3>
<FluentStack Orientation="Orientation.Horizontal" HorizontalGap="2" >
    <ShiftButtons startingValue="@primaryDice" maxShift="2" DiceShifted="PrimaryDiceShifted"></ShiftButtons>
    <FluentStack Orientation="Orientation.Vertical" VerticalGap="2" HorizontalGap="2">
        <div>
            <DiceSet color="DiceSet.DiceColor.red" size="DiceSet.DiceSize.regular" face="@primaryDice" />
            <DiceSet color="DiceSet.DiceColor.purple" size="DiceSet.DiceSize.regular" face="@secondaryDice" />
        </div>
        <FluentButton Appearance="Appearance.Accent" @onclick=Roll2Dices IconStart="@(new Icons.Regular.Size16.Cube())">Roll</FluentButton>
    </FluentStack>
    <ShiftButtons startingValue="@primaryDice" maxShift="2" DiceShifted="SecondaryDiceShifted"></ShiftButtons>
    <FluentSpacer Width="200"></FluentSpacer>
    <FluentButton Appearance="Appearance.Accent" @onclick=NextTurn IconStart="@(new Icons.Regular.Size16.ArrowNext())">End Turn</FluentButton>
</FluentStack>


@code {

    [Parameter]
    public required List<string> actions { get; set; }

    [Parameter]
    public EventCallback<List<string>> ActionsChanged { get; set; }

    private int turnCounter = 0;
    private int primaryDice = 0;
    private int secondaryDice = 0;
   
    protected override void OnInitialized()
    {
        actions.Add($"Console Initialized");
    }
    private void Roll2Dices()
    {
        var dices = DiceResult.Roll2Dices();
        primaryDice = dices.PrimaryDice;
        secondaryDice = dices.SecondaryDice;

        actions.Add($"Rolled {primaryDice} and {secondaryDice}");
        ActionsChanged.InvokeAsync(actions);

        StateHasChanged();
    }

    private void NextTurn()
    {
        actions.Add($"End Turn {turnCounter}");
        turnCounter++;
        primaryDice = 0;
        secondaryDice = 0;
        actions.Add($"Start Turn {turnCounter}");
        ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }

    private async Task PrimaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = primaryDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            primaryDice++;
        }
        else
        {
            primaryDice--;
        }
        actions.Add($"Primary dice Shifted from {preValue} to {primaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }

    private async Task SecondaryDiceShifted(ShiftButtons.ShiftDirection shift)
    {
        int preValue = secondaryDice;
        if (shift == ShiftButtons.ShiftDirection.Up)
        {
            secondaryDice++;
        }
        else
        {
            secondaryDice--;
        }
        actions.Add($"Secondary dice Shifted from {preValue} to {secondaryDice}");
        await ActionsChanged.InvokeAsync(actions);
        StateHasChanged();
    }
}
